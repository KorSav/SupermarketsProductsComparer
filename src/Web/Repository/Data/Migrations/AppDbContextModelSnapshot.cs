// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PriceComparer.Web.Repository.Data;

#nullable disable

namespace PriceComparer.Repository.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeasureLookup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.ToTable("MeasureLookup");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Kg"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "L"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "M"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("ProductStatusLookup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("character varying(11)");

                    b.HasKey("Id");

                    b.ToTable("ProductStatusLookup");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Updated"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "NeedRemoval"
                        });
                });

            modelBuilder.Entity("ShopLookup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.ToTable("ShopLookup");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Silpo"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Fozzy"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Fora"
                        });
                });

            modelBuilder.Entity("SortByLookup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("character varying(12)");

                    b.HasKey("Id");

                    b.ToTable("SortByLookup");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Name"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "UnifiedPrice"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Price"
                        });
                });

            modelBuilder.Entity("SortOrderLookup", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)");

                    b.HasKey("Id");

                    b.ToTable("SortOrderLookup");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Asc"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Desc"
                        });
                });

            modelBuilder.Entity("program.Domain.Product", b =>
                {
                    b.Property<string>("FullLinkProduct")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("FullLinkImage")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<byte>("Measure")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("PriceInitial")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("PriceUnified")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<byte>("ProductStatus")
                        .HasColumnType("smallint");

                    b.Property<byte>("Shop")
                        .HasColumnType("smallint");

                    b.HasKey("FullLinkProduct");

                    b.HasIndex("Measure");

                    b.HasIndex("ProductStatus");

                    b.HasIndex("Shop");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("program.Domain.Request", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<byte>("Sort")
                        .HasColumnType("smallint");

                    b.Property<byte>("SortOrder")
                        .HasColumnType("smallint");

                    b.HasKey("Name", "UserId");

                    b.HasIndex("Sort");

                    b.HasIndex("SortOrder");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Name = "м'ясо",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "сосиски",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "сардельки",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "овоч",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "хліб",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "фрукт",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "молоко",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "сир",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "йогурт",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "яйця",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "риба",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "крупа",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "макаронні вироби",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "цукор",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "сіль",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "олія",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "оцет",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "кава зерно",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "кава розчинна",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "чай",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "шоколад",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "печиво",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "торт",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "морозиво",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "сік",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "вода",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "напій",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "ковбаса",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "консерви",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "соус",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "спеції",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "шампунь",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "зубна паста",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "мило",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "туалетний папір",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "пральний порошок",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "корм",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        },
                        new
                        {
                            Name = "підгузки",
                            UserId = -1,
                            Sort = (byte)0,
                            SortOrder = (byte)0
                        });
                });

            modelBuilder.Entity("program.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "admin@gmail.com",
                            Name = "admin",
                            PasswordHash = "admin"
                        });
                });

            modelBuilder.Entity("program.Domain.Product", b =>
                {
                    b.HasOne("MeasureLookup", null)
                        .WithMany()
                        .HasForeignKey("Measure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductStatusLookup", null)
                        .WithMany()
                        .HasForeignKey("ProductStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopLookup", null)
                        .WithMany()
                        .HasForeignKey("Shop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("program.Domain.Request", b =>
                {
                    b.HasOne("SortByLookup", null)
                        .WithMany()
                        .HasForeignKey("Sort")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SortOrderLookup", null)
                        .WithMany()
                        .HasForeignKey("SortOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("program.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
